package com.aaron.algorithm.search;

import java.util.ArrayList;
import java.util.List;

//注意：使用二分查找的前提是 该数组是有序的.
public class BinarySearch {

    public static void main(String[] args) {
        int arr[] = {1, 3, 5, 100, 1000, 1000, 1000, 1045};
        //int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};

        //int resIndex = binarySearch(arr, 0, arr.length - 1, 1000);
        //System.out.println("resIndex=" + resIndex);

        List<Integer> resIndexList = binarySearch2(arr, 0, arr.length - 1, 1000);
        System.out.println("resIndexList=" + resIndexList);
    }

    // 二分查找算法

    /**
     * @param arr     数组
     * @param left    左边的索引
     * @param right   右边的索引
     * @param findVal 要查找的值
     * @return 如果找到就返回下标, 如果没有找到, 就返回 -1
     */

    public static int binarySearch(int[] arr, int left, int right, int findVal) {

        // 当 left > right 时,说明递归整个数组,但是没有找到
        int mid = (left + right) / 2;
        int midVal = arr[mid];
        if (left > right) {
            return -1;
        }
        if (findVal > midVal) {// 向 右递归
            return binarySearch(arr, mid + 1, right, findVal);
        } else if (findVal < midVal) { // 向左递归
            return binarySearch(arr, left, mid - 1, findVal);
        } else {
            return mid;
        }
    }

    /*
     * 当一个有序数组中,有多个相同的数值时,如何将所有的数值都查找到
     * 思路分析
     * 1. 在找到mid 索引值,不要马上返回
     * 2. 向mid 索引值的左边扫描,将所有满足 1000, 的元素的下标,加入到集合ArrayList
     * 3. 向mid 索引值的右边扫描,将所有满足 1000, 的元素的下标,加入到集合ArrayList
     * 4. 将Arraylist返回
     */

    public static List<Integer> binarySearch2(int[] arr, int left, int right, int findVal) {

        // 当 left > right 时,说明递归整个数组,但是没有找到
        if (left > right) {
            return new ArrayList<Integer>();
        }

        int mid = (left + right) / 2;
        int midVal = arr[mid];

        if (findVal > midVal) {
            return binarySearch2(arr, mid + 1, right, findVal);
        } else if (findVal < midVal) {
            return binarySearch2(arr, left, mid - 1, findVal);
        } else {
            ArrayList<Integer> arrayListIndex = new ArrayList<>();
            arrayListIndex.add(mid);

            //向mid左边开始扫描
            int tmp = mid - 1;
            while (true) {
                if (arr[tmp] != findVal || tmp < 0) {
                    break;
                }
                arrayListIndex.add(tmp);
                tmp -= 1;
            }

            //向mid右边开始扫描
            tmp = mid + 1;
            while (true) {
                if (arr[tmp] != findVal || tmp > arr.length) {
                    break;
                }
                arrayListIndex.add(tmp);
                tmp += 1;
            }
            return arrayListIndex;
        }
    }
}
